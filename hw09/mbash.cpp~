#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/wait.h>


char** splitlines() {
	int size = 0;
	char buf[256];
	char **args = NULL;
	char *ptr;
	fgets(buf, 256, stdin);
	printf("%s\n", buf);
	ptr = strchr(buf, '\n');
	*ptr = '\0';
	ptr = strtok(buf, " ");
	while(ptr != NULL) {
		printf("%s\n", ptr);
		args = (char**) realloc(args, sizeof(char*) * (size+1));
		args[size] = strdup(ptr);
		ptr = strtok(NULL, " ");
		size++;
	}
	args[size] = NULL;
	return args;
}

int execute( char **args) {



}


int main() {
	char **args;
	while(true){
		printf("MY_UNIX> ");	
		args = splitlines();
		if(strcmp(args[0], "exit") == 0){
			printf("Exiting...\n");
			exit(1);
		}
/*
		for(int i = 0; i < 10; i++) {
			if(args[i] == NULL){
				break;
			} else{
				printf("%s\n", args[i]);
			}
		}
*/	
		pid_t retval = fork();
		if(retval == 0){
			//child
			execvp(args[0], args);
		} else if(retval > 0){
			int status;
			wait(&status);
			//parent
		} else {
			//error	
			perror("FORK ERROR");
			exit(1);
		}
		free(args);		
	}
}
